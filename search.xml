<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringBean配置方式</title>
    <url>/2019/12/27/SpringBean%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<img src="/2019/12/27/SpringBean%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F/image01.png" class="">

<a id="more"></a>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>Spring提供了BenaFactory和ApplicationContext两种类型的IOC容器实现，Spring又是如何将Bean装配到IOC容器中的呢？</strong></p>
<p>以前Java框架基本都采用了XML作为配置文件，但是现在Java框架又不约而同地支持基于Annotation的“零配置”来代替XML配置文件，Struts2、Hibernate、Spring都开始使用Annotation来代替XML配置文件了；而在Spring 3.x提供了三种选择，分别是：基于XML的配置、基于注解的配置和基于Java类的配置。</p>
<hr>
<p>下面分别介绍下这三种配置方式：</p>
<h2 id="基于XML的配置"><a href="#基于XML的配置" class="headerlink" title="基于XML的配置"></a>基于XML的配置</h2><p>应用场景：当使用三方类库时，比如DataSource、HibernateTemplate等，无法在类中标注注解信息，只能通过XML进行配置；而且命名空间的配置，比如aop、context等，也只能采用基于XML的配置。</p>
<ul>
<li>JavaBean</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">this</span>.name = name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      System.out.println(<span class="string">"hello: "</span> + name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">HelloWorld</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      System.out.println(<span class="string">"HelloWorld类的无参构造器"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      System.out.println(<span class="string">"do init  ......"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      System.out.println(<span class="string">"do destroy  ...... "</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>Xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloWorld"</span> <span class="attr">class</span>=<span class="string">"spring01.HelloWorld"</span> <span class="attr">lazy-init</span>=<span class="string">"true"</span> <span class="attr">init-method</span>=<span class="string">"init"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">      <span class="attr">destroy-method</span>=<span class="string">"destroy"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"spring"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr></table></figure>

<p>通过属性注入，即setter方法注入Bean的值或者依赖的对象，<strong>属性注入是最常用的注入方式</strong>。</p>
<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ConfigurableApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="string">"applicationContext.xml"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">HelloWorld helloWorld = (HelloWorld) context.getBean(<span class="string">"helloWorld"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(helloWorld);</span></pre></td></tr><tr><td class="code"><pre><span class="line">helloWorld.hello();</span></pre></td></tr><tr><td class="code"><pre><span class="line">context.close();</span></pre></td></tr></table></figure>

<p>为了演示容器销毁时调用Bean的destroy-method，此处使用ConfigurableApplicationContext，ConfigurableApplicationContext扩展于ApplicationContext，新增了两个方法：refresh()和close()，让ApplicationContext具有启动，刷新和关闭上文的能力。</p>
<ul>
<li>测试结果</li>
</ul>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">HelloWorld类的无参构造器</span></pre></td></tr><tr><td class="code"><pre><span class="line">setName: spring</span></pre></td></tr><tr><td class="code"><pre><span class="line">do init  ......</span></pre></td></tr><tr><td class="code"><pre><span class="line">spring01.HelloWorld@55fe41ea</span></pre></td></tr><tr><td class="code"><pre><span class="line">hello: spring</span></pre></td></tr><tr><td class="code"><pre><span class="line">do destroy  ......</span></pre></td></tr></table></figure>

<p>从上出输出也可以看出，程序启动在获取Bean时，先创建Bean对象，然后设置属性setName，执行init方法，最后再获取Bean实例，当容器关闭时，调用Bean的destroy方法。</p>
<h3 id="XML装配常用的集合类"><a href="#XML装配常用的集合类" class="headerlink" title="XML装配常用的集合类"></a>XML装配常用的集合类</h3><ul>
<li>JavaBean</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionDemo</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> List&lt;String&gt; list;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> Map&lt;String, Object&gt; map;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> Properties properties;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> Set&lt;String&gt; set;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> String[] array;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">//省略setter getter</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"collectionDemo"</span> <span class="attr">class</span>=<span class="string">"spring01.CollectionDemo"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"装配集合类"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--装配List类型的list--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value-list-1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value-list-2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value-list-3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--装配Map类型的map--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"map1"</span> <span class="attr">value</span>=<span class="string">"value-key-1"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"map2"</span> <span class="attr">value</span>=<span class="string">"value-key-2"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"map3"</span> <span class="attr">value</span>=<span class="string">"value-key-3"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--装配Properties类型的properties--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"pro1"</span>&gt;</span>value-pro-1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"pro2"</span>&gt;</span>value-pro-2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"pro3"</span>&gt;</span>value-pro-3<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--装配Set类型的set--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"set"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value-set-1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value-set-2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value-set-3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--装配String[]类型的array--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"array"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value-array-1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value-array-2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value-array-3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">CollectionDemo demo = ctx.getBean(CollectionDemo<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(demo.getName());</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(demo.getProperties().getProperty(<span class="string">"pro1"</span>));</span></pre></td></tr></table></figure>

<ul>
<li>测试结果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">装配集合类</span></pre></td></tr><tr><td class="code"><pre><span class="line">value-pro-1</span></pre></td></tr></table></figure>

<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">总结：</span></pre></td></tr><tr><td class="code"><pre><span class="line">   List 属性为对应的 &lt;list&gt; 元素进行装配，然后通过多个 &lt;value&gt; 元素设值</span></pre></td></tr><tr><td class="code"><pre><span class="line">   Map 属性为对应的 &lt;map&gt; 元素进行装配，然后通过多个 &lt;entry&gt; 元素设值， 只是 entry 包含一个键值对(key-value)的设置</span></pre></td></tr><tr><td class="code"><pre><span class="line">   Properties 属性为对应的 &lt;properties&gt; 元素进行装配，通过多个 &lt;property&gt; 元素设值，只是 properties 元素有一个必填属性 key ，然后可以设置值</span></pre></td></tr><tr><td class="code"><pre><span class="line">   Set 属性为对应的 &lt;set&gt; 元素进行装配，然后通过多个 &lt;value&gt; 元素设值</span></pre></td></tr><tr><td class="code"><pre><span class="line"> 对于数组而言，可以使用 &lt;array&gt; 设置值，然后通过多个 &lt;value&gt; 元素设值。</span></pre></td></tr></table></figure>



<h3 id="命名空间装配"><a href="#命名空间装配" class="headerlink" title="命名空间装配"></a>命名空间装配</h3><p> Spring 还提供了对应的命名空间的定义，只是在使用命名空间的时候要先引入对应的命名空间和 XML 模式（XSD）文件。</p>
<ul>
<li><h4 id="p-命名空间（声明setter属性）"><a href="#p-命名空间（声明setter属性）" class="headerlink" title="p-命名空间（声明setter属性）"></a>p-命名空间（声明setter属性）</h4></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:p="http://www.springframework.org/schema/p"</span></pre></td></tr><tr><td class="code"><pre><span class="line">.</span></pre></td></tr><tr><td class="code"><pre><span class="line">.</span></pre></td></tr><tr><td class="code"><pre><span class="line">.   </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloWorld2"</span> <span class="attr">class</span>=<span class="string">"spring01.HelloWorld"</span> <span class="attr">p:name</span>=<span class="string">"Java 是世界上最好的语言"</span>/&gt;</span></span></pre></td></tr></table></figure>



<ul>
<li><h4 id="c-命名空间（声明构造参数）"><a href="#c-命名空间（声明构造参数）" class="headerlink" title="c-命名空间（声明构造参数）"></a>c-命名空间（声明构造参数）</h4><p>如下面一个javabean：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> String brand;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> String corp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> <span class="keyword">double</span> price;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String brand, String corp, <span class="keyword">double</span> price)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">super</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">this</span>.brand = brand;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">this</span>.corp = corp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">this</span>.price = price;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr></table></figure>

<p>​       使用c-命名空间来声明构造器参数：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:c="http://www.springframework.org/schema/c"</span></pre></td></tr><tr><td class="code"><pre><span class="line">.</span></pre></td></tr><tr><td class="code"><pre><span class="line">.</span></pre></td></tr><tr><td class="code"><pre><span class="line">.  </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    不适用命名空间--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car4"</span> <span class="attr">class</span>=<span class="string">"spring01.Car"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"Audi"</span> <span class="attr">index</span>=<span class="string">"0"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"上海"</span> <span class="attr">index</span>=<span class="string">"1"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"200000"</span> <span class="attr">index</span>=<span class="string">"2"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    使用命名空间--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car5"</span> <span class="attr">class</span>=<span class="string">"spring01.Car"</span> <span class="attr">c:brand</span>=<span class="string">"Audi"</span> <span class="attr">c:corp</span>=<span class="string">"上海"</span> <span class="attr">c:price</span>=<span class="string">"20000"</span>/&gt;</span></span></pre></td></tr></table></figure>

<ul>
<li><h4 id="util-命名空间"><a href="#util-命名空间" class="headerlink" title="util-命名空间"></a>util-命名空间</h4></li>
</ul>
<p>util-命名空间提供的所有元素：</p>
<table>
<thead>
<tr>
<th align="left">元素</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="util:constant" target="_blank" rel="noopener">util:constant</a></td>
<td>引用某个类型public static 域，并将其暴露为bean</td>
</tr>
<tr>
<td align="left"><a href="util:list" target="_blank" rel="noopener">util:list</a></td>
<td>创建一个java.util.list类型的bean，其中包含值或者引用</td>
</tr>
<tr>
<td align="left"><a href="util:map" target="_blank" rel="noopener">util:map</a></td>
<td>创建一个java.util.map类型的bean，其中包含值或者引用</td>
</tr>
<tr>
<td align="left"><a href="util:properties" target="_blank" rel="noopener">util:properties</a></td>
<td>创建一个java.util.properties类型的bean</td>
</tr>
<tr>
<td align="left"><a href="util:property-path" target="_blank" rel="noopener">util:property-path</a></td>
<td>引用一个属性（或内嵌属性），并将其暴露为bean</td>
</tr>
<tr>
<td align="left"><a href="util:set" target="_blank" rel="noopener">util:set</a></td>
<td>创建一个java.util.set类型的bean，其中包含值或者引用</td>
</tr>
</tbody></table>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入util-命名空间之前 --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"bean1"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"bean2"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入util-命名空间之后 --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"bean1"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"bean2"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span></pre></td></tr></table></figure>



<h2 id="基于注解的配置"><a href="#基于注解的配置" class="headerlink" title="基于注解的配置"></a>基于注解的配置</h2><p>应用场景：当Bean的实现类是当前项目开发的，可以直接在Java类中使用基于注解的配置，配置相对比较简单。这里暂不多做描述，也是<strong>最常用的配置方式</strong>。</p>
<h2 id="基于Java类的配置"><a href="#基于Java类的配置" class="headerlink" title="基于Java类的配置"></a>基于Java类的配置</h2><p>应用场景：当实例化Bean的逻辑比较复杂时，则比较适合基于Java类配置的方式。比如，你想要将第三方库中的组件装配到你的应用中，在这种情况下，是没有办法在它的类上添加@Component和@Autowired注解的，因此就不能使用基于注解的配置方案了。</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring IOC</title>
    <url>/2019/12/23/Spring-IOC/</url>
    <content><![CDATA[<img src="/2019/12/23/Spring-IOC/image01.png" class="">

<a id="more"></a>

<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="IOC（Inversion-of-Control）"><a href="#IOC（Inversion-of-Control）" class="headerlink" title="IOC（Inversion of Control）"></a>IOC（Inversion of Control）</h2><p>其思想是反转资源获取的方向，传统的资源查找方式是要求组件想容器发送请求来查找资源，作为回应，容器适时地返回资源。</p>
<p>而应用了IOC之后，则是容器主动地将资源推送给它所管理的组件，组件所要做的仅是选择一种合适的方式来接收资源，这种行为也被称为查找的被动形式。</p>
<h2 id="DI（Dependency-Injection）"><a href="#DI（Dependency-Injection）" class="headerlink" title="DI（Dependency Injection）"></a>DI（Dependency Injection）</h2><p>IOC的另一种表述方式：即组件以一写预先定义好的方式（如：setter方法）接收来自如容器的资源注入。相较于IOC而言，这种表述更直接。</p>
<h1 id="Spring-IOC-实现"><a href="#Spring-IOC-实现" class="headerlink" title="Spring IOC 实现"></a>Spring IOC 实现</h1><blockquote>
<p>在Spring IOC容器读取Bean配置 创建Bean实例之前，必须对容器进行实例化。只有在容器实例化后，才可以从IOC容器里获取Bean实例并使用。</p>
</blockquote>
<p>Spring提供了两种类型的IOC容器实现</p>
<ul>
<li><p>BeanFactory</p>
<p>  IOC的基本实现。</p>
</li>
</ul>
<ul>
<li><p>AppliacationContext</p>
<p>  提供了更多的高级特性，是BeanFactory的子接口,代表的是一个IOC容器.</p>
</li>
</ul>
<pre><code>BeanFactory是Spring框架的基础设施，面向的是Spring本身；
AppliacationContext面向的是使用Spring框架的开发者;
几乎所有的应用场景都直接使用AppliacationContext而非底层的BeanFactory;
无论使用何种方式，配置文件是相同的.</code></pre><h2 id="AppliacationContext"><a href="#AppliacationContext" class="headerlink" title="AppliacationContext"></a>AppliacationContext</h2><p>AppliacationContext主要实现类：</p>
<ul>
<li><p>ClassPathXmlApplicationContext</p>
<p>  从类路径下加载配置文件。</p>
</li>
<li><p>FileSystemXmlApplicationContext<br>  从系统文件中加载配置文件。</p>
<pre><code>相关父类或拓展类可查看spring源码。</code></pre></li>
</ul>
<h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><ol>
<li><a href="https://javadoop.com/post/spring-ioc" target="_blank" rel="noopener">  Spring IOC 容器源码分析</a></li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 plan</title>
    <url>/2019/12/22/2020-plan/</url>
    <content><![CDATA[<img src="/2019/12/22/2020-plan/image01.png" class="" title="2020年学习计划">

<a id="more"></a>

<ul>
<li><p>Spring  </p>
</li>
<li><p>并发编程  </p>
</li>
<li><p>容器技术方案研究  </p>
</li>
</ul>
]]></content>
      <tags>
        <tag>计划</tag>
      </tags>
  </entry>
</search>
