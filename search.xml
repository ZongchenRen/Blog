<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JS加减乘除精度运算</title>
    <url>/2020/02/08/JS%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E7%B2%BE%E5%BA%A6%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<img src="/2020/02/08/JS%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E7%B2%BE%E5%BA%A6%E8%BF%90%E7%AE%97/image01.png" class="">

<a id="more"></a>

<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>使用js 在使用基本的加减乘除数学运算时，会出现精度问题。</p>
<p>如：</p>
<p> 0.1 + 0.2 = 0.30000000000000004</p>
<p>1.5 - 1.2 = 0.30000000000000004</p>
<p>19.9 * 100 = 1989.9999999999998</p>
<p>0.3 / 0.1 = 2.9999999999999996</p>
<h1 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> ** 加法函数，用来得到精确的加法结果</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> ** 说明：javascript的加法结果会有误差，在两个浮点数相加的时候会比较明显。这个函数返回较为精确的加法结果。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> ** 调用：accAdd(arg1,arg2)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> ** 返回值：arg1加上arg2的精确结果</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> **/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">accAdd</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">var</span> r1, r2, m, c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		r1 = arg1.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">catch</span> (e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		r1 = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		r2 = arg2.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">catch</span> (e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		r2 = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	c = <span class="built_in">Math</span>.abs(r1 - r2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	m = <span class="built_in">Math</span>.pow(<span class="number">10</span>, <span class="built_in">Math</span>.max(r1, r2));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (c &gt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">var</span> cm = <span class="built_in">Math</span>.pow(<span class="number">10</span>, c);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (r1 &gt; r2) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			arg1 = <span class="built_in">Number</span>(arg1.toString().replace(<span class="string">"."</span>, <span class="string">""</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">			arg2 = <span class="built_in">Number</span>(arg2.toString().replace(<span class="string">"."</span>, <span class="string">""</span>)) * cm;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			arg1 = <span class="built_in">Number</span>(arg1.toString().replace(<span class="string">"."</span>, <span class="string">""</span>)) * cm;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			arg2 = <span class="built_in">Number</span>(arg2.toString().replace(<span class="string">"."</span>, <span class="string">""</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		arg1 = <span class="built_in">Number</span>(arg1.toString().replace(<span class="string">"."</span>, <span class="string">""</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		arg2 = <span class="built_in">Number</span>(arg2.toString().replace(<span class="string">"."</span>, <span class="string">""</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> (arg1 + arg2) / m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//给Number类型增加一个add方法，调用起来更加方便。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> accAdd(arg, <span class="keyword">this</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>



<h1 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> ** 减法函数，用来得到精确的减法结果</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> ** 说明：javascript的减法结果会有误差，在两个浮点数相减的时候会比较明显。这个函数返回较为精确的减法结果。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> ** 调用：accSub(arg1,arg2)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> ** 返回值：arg1加上arg2的精确结果</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> **/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">accSub</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">var</span> r1, r2, m, n;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		r1 = arg1.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">catch</span> (e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		r1 = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		r2 = arg2.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">catch</span> (e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		r2 = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	m = <span class="built_in">Math</span>.pow(<span class="number">10</span>, <span class="built_in">Math</span>.max(r1, r2)); <span class="comment">//动态控制精度长度</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	n = (r1 &gt;= r2) ? r1 : r2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> ((arg1 * m - arg2 * m) / m).toFixed(n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 给Number类型增加一个sub方法，调用起来更加方便。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.prototype.sub = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> accSub(arg, <span class="keyword">this</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>



<h1 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> ** 乘法函数，用来得到精确的乘法结果</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> ** 说明：javascript的乘法结果会有误差，在两个浮点数相乘的时候会比较明显。这个函数返回较为精确的乘法结果。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> ** 调用：accMul(arg1,arg2)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> ** 返回值：arg1乘以 arg2的精确结果</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> **/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">accMul</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">var</span> m = <span class="number">0</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		s1 = arg1.toString(),</span></pre></td></tr><tr><td class="code"><pre><span class="line">		s2 = arg2.toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		m += s1.split(<span class="string">"."</span>)[<span class="number">1</span>].length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">catch</span> (e) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		m += s2.split(<span class="string">"."</span>)[<span class="number">1</span>].length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">catch</span> (e) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> <span class="built_in">Number</span>(s1.replace(<span class="string">"."</span>, <span class="string">""</span>)) * <span class="built_in">Number</span>(s2.replace(<span class="string">"."</span>, <span class="string">""</span>)) / <span class="built_in">Math</span>.pow(<span class="number">10</span>, m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 给Number类型增加一个mul方法，调用起来更加方便。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.prototype.mul = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> accMul(arg, <span class="keyword">this</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>



<h1 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> ** 除法函数，用来得到精确的除法结果</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> ** 说明：javascript的除法结果会有误差，在两个浮点数相除的时候会比较明显。这个函数返回较为精确的除法结果。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> ** 调用：accDiv(arg1,arg2)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> ** 返回值：arg1除以arg2的精确结果</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> **/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">accDiv</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">var</span> t1 = <span class="number">0</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		t2 = <span class="number">0</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		r1, r2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		t1 = arg1.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">catch</span> (e) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		t2 = arg2.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">catch</span> (e) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">with</span>(<span class="built_in">Math</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		r1 = <span class="built_in">Number</span>(arg1.toString().replace(<span class="string">"."</span>, <span class="string">""</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		r2 = <span class="built_in">Number</span>(arg2.toString().replace(<span class="string">"."</span>, <span class="string">""</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> (r1 / r2) * pow(<span class="number">10</span>, t2 - t1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//给Number类型增加一个div方法，调用起来更加方便。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.prototype.div = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> accDiv(<span class="keyword">this</span>, arg);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>精度运算</tag>
      </tags>
  </entry>
  <entry>
    <title>Java回调函数</title>
    <url>/2020/02/01/Java%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<img src="/2020/02/01/Java%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/image01.png" class="">

<a id="more"></a>

<h1 id="在C或者C-中回调函数的定义"><a href="#在C或者C-中回调函数的定义" class="headerlink" title="在C或者C++中回调函数的定义"></a>在C或者C++中回调函数的定义</h1><p>程序在调用一个函数时，将自己的函数的地址作为参数传递给程序调用的函数时（那么这个自己的函数称回调函数）</p>
<h1 id="Java中定义"><a href="#Java中定义" class="headerlink" title="Java中定义"></a>Java中定义</h1><p>Java中没有指针，不能传递方法的地址，一般采用接口回调实现：把实现某一接口的类创建的对象的引用赋给该接口声明的接口变量，那么该接口变量就可以调用被类实现的接口的方法。</p>
<h1 id="回调实现原理"><a href="#回调实现原理" class="headerlink" title="回调实现原理"></a>回调实现原理</h1><p>首先创建一个回调对象，然后再创建一个控制器对象，将回调对象需要被调用的方法告诉控制器对象。控制器对象负责检查某个场景是否出现或某个条件是否满足。当此场景出现或此条件满足时，自动调用回调对象的方法。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><ol>
<li>创建一个回调接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 回调接口</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICallBack</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ol start="2">
<li>创建实现类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallBack</span> <span class="keyword">implements</span> <span class="title">ICallBack</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(<span class="string">"执行run方法..."</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ol start="3">
<li>控制类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 控制类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">private</span> ICallBack callBack;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Controller</span><span class="params">(ICallBack callBack)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.callBack = callBack;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">//***核心***</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    callBack.run();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>运行</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProgramRun</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Controller controller = <span class="keyword">new</span> Controller(<span class="keyword">new</span> CallBack());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    controller.doSomething();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/bjyfb/article/details/10462555" target="_blank" rel="noopener">https://blog.csdn.net/bjyfb/article/details/10462555</a></p>
<p><a href="http://www.jcodecraeer.com/a/chengxusheji/java/2012/0822/370.html" target="_blank" rel="noopener">http://www.jcodecraeer.com/a/chengxusheji/java/2012/0822/370.html</a></p>
]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>程序设计</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringAOP</title>
    <url>/2020/01/21/SpringAOP/</url>
    <content><![CDATA[<img src="/2020/01/21/SpringAOP/image01.png" class="">

<a id="more"></a>

<h1 id="在Spring中启用-AspectJ注解支持"><a href="#在Spring中启用-AspectJ注解支持" class="headerlink" title="在Spring中启用@AspectJ注解支持"></a>在Spring中启用@AspectJ注解支持</h1><ul>
<li>必须依赖<code>aopalliance.jar</code>、<code>aspectjweaver.jar</code>、<code>spring-aspects.jar</code></li>
<li>xml的<beans>根元素中配置aop Schema</li>
<li>要在SpringIoc容器中启用AspectJ注解支持，只要在Bean配置文件中定义一个空的XML元素<code>&lt;aop:aspectj-autoproxy/&gt;</code>，当SpringIoc容器检测到Bean配置文件中的<code>&lt;aop:aspectj-autoproxy/&gt;</code>元素时，会自动为与AspectJ切面匹配的Bean创建代理</li>
</ul>
<h1 id="如何把类声明为一个切面"><a href="#如何把类声明为一个切面" class="headerlink" title="如何把类声明为一个切面"></a>如何把类声明为一个切面</h1><p>把横切关注点的代码抽象到切面的类中，在AspectJ注解中，切面只是一个带有<code>@AspectJ</code>注解的<code>Java类</code>。</p>
<ul>
<li>需要把该类放入到IOC容器中<code>@Component</code></li>
<li>需要声明为一个切面 <code>@AspectJ</code></li>
</ul>
<h1 id="AspectJ支持五种类型的通知注解"><a href="#AspectJ支持五种类型的通知注解" class="headerlink" title="AspectJ支持五种类型的通知注解"></a>AspectJ支持五种类型的通知注解</h1><p>通知是标注有某种注解的简单的java方法。在方法前添加通知注解如@Before注解，并将切入点表达式的值作为注解值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before</span>(<span class="string">"execution(public int com.aop.math.add(int,int))"</span>) <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    	System.out.println(<span class="string">"The method begins...."</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		  System.out.println(joinPoint.getTarget());</span></pre></td></tr><tr><td class="code"><pre><span class="line">		  System.out.println(joinPoint.getSignature().getName());</span></pre></td></tr><tr><td class="code"><pre><span class="line">		  System.out.println(Arrays.asList(joinPoint.getArgs()));</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h2 id="Before"><a href="#Before" class="headerlink" title="@Before"></a>@Before</h2><p><strong>前置通知</strong>，在方法执行之前执行。</p>
<h2 id="After"><a href="#After" class="headerlink" title="@After"></a>@After</h2><p><strong>后置通知</strong>，在方法执行之后（无论是否发生异常）执行，即连接点返回结果或者抛出异常的时候，后置通知来记录方法的终止。</p>
<p>在后置通知中，还不能访问目标方法执行的结果，需要在返回通知中访问。</p>
<h2 id="AfterReturning"><a href="#AfterReturning" class="headerlink" title="@AfterReturning"></a>@AfterReturning</h2><p><strong>返回通知</strong>，在方法正常结束执行代码之后执行。返回通知是可以访问方法的返回值的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterReturning</span>(value = <span class="string">"execution(public int com.aop.math.*(int,int))"</span>, returning = <span class="string">"result"</span>) <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="params">   JoinPoint joinPoint, Object result)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  System.out.println(joinPoint.getSignature().getName());</span></pre></td></tr><tr><td class="code"><pre><span class="line">  System.out.println(<span class="string">"The method returning....result:"</span> + result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h2 id="AfterThrowing"><a href="#AfterThrowing" class="headerlink" title="@AfterThrowing"></a>@AfterThrowing</h2><p><strong>异常通知</strong>，在方法抛出异常之后执行。可以访问异常对象，切可以指定在出现特定异常是再执行通知代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing</span>(value = <span class="string">"execution(public int com.aop.math.*(int,int))"</span>, throwing = <span class="string">"e"</span>) <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="params">   Exception e)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  System.out.println(<span class="string">"The method AfterThrowing...."</span> + e);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h2 id="Around"><a href="#Around" class="headerlink" title="@Around"></a>@Around</h2><p><strong>环绕通知</strong>，围绕着方法执行。</p>
<ul>
<li>环绕通知需要携带ProceedingJoinPoint类型的参数；</li>
<li>环绕通知类似于动态代理的全过程，ProceedingJoinPoint类型的参数可以决定是否执行目标方法；</li>
<li>且环绕通知必须有返回值，返回值即为目标方法的返回值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around</span>(value = <span class="string">"execution(public int com.aop.math.*(int,int))"</span>) <span class="function"><span class="keyword">public</span> Object <span class="title">afteAroundrThrowing</span><span class="params">(</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="params">   ProceedingJoinPoint proceedingJoinPoint)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Object result = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(<span class="string">"前置通知..."</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//执行目标方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    result = proceedingJoinPoint.proceed();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(<span class="string">"返回通知..."</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    throwable.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(<span class="string">"异常通知..."</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  System.out.println(<span class="string">"后置通知..."</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  System.out.println(<span class="string">"The method around...."</span> + result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="切面的优先级"><a href="#切面的优先级" class="headerlink" title="切面的优先级"></a>切面的优先级</h1><p>当一个实现类有多个切面时，可以使用<code>@Order</code>注解制定切面的优先级，值越小，优先级越高。<code>@Order</code>的默认值为int的最大值<code>2&lt;&lt;31-1</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Order &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> 2147483647</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Order</span>(<span class="number">0</span>) <span class="meta">@Aspect</span> <span class="meta">@Component</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingAspect</span> </span>&#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Order</span>(<span class="number">1</span>) <span class="meta">@Component</span> <span class="meta">@Aspect</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationAspect</span> </span>&#123;&#125;</span></pre></td></tr></table></figure>

<p>如上面两个切面，<code>LoggingAspect</code>中的切面优先执行。</p>
<h1 id="重用切点表达式"><a href="#重用切点表达式" class="headerlink" title="重用切点表达式"></a>重用切点表达式</h1><ul>
<li>定义一个方法，声明切入点表达式，一般情况下，该方法不需要添加其他的代码。</li>
<li>使用<code>@Pointcut</code>来声明切入点表达式</li>
<li>后面的其他同志直接使用方法名来直接阴影切入点表达式。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="meta">@Aspect</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationAspect</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="meta">@Pointcut</span>(value = <span class="string">"execution( public int aop.ArithmeticCaculator.*(..))"</span>) </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declareJoinPointExpression</span><span class="params">()</span> </span>&#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="meta">@Before</span>(<span class="string">"declareJoinPointExpression()"</span>) <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validateArgs</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      System.out.println(<span class="string">"validate:"</span> + Arrays.asList(joinPoint.getArgs()));</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>AOP</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot集成Log4j2</title>
    <url>/2020/01/09/SpringBoot%E9%9B%86%E6%88%90Log4j2/</url>
    <content><![CDATA[<img src="/2020/01/09/SpringBoot%E9%9B%86%E6%88%90Log4j2/image01.png" class="">

<a id="more"></a>

<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>使用Spring Boot 2搭建项目时，系统默认继承了的是Logback，查阅资料得知Log4j2在性能方面比Logback要优越得多，所以决定使用Log4j2。</p>
<h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">&lt;!--排除logback--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--log4j2 依赖--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr></table></figure>

<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="Application-yml"><a href="#Application-yml" class="headerlink" title="Application.yml"></a>Application.yml</h2><p>指定log4j2.xml配置文件位置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">config:</span> <span class="string">classpath:config/log4j2.xml</span></span></pre></td></tr></table></figure>

<h2 id="Log4j2-xml"><a href="#Log4j2-xml" class="headerlink" title="Log4j2.xml"></a>Log4j2.xml</h2><p>配置日志文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">monitorInterval</span>=<span class="string">"30"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">&lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">&lt;!--变量配置--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">Properties</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">&lt;!-- 格式化输出：%date表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">&lt;!-- %logger&#123;36&#125; 表示 Logger 名字最长36个字符 --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_PATTERN"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">                  <span class="attr">value</span>=<span class="string">"%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %highlight&#123;%-5level&#125; [%t] %highlight&#123;%c&#123;1.&#125;.%M(%L)&#125;: %msg%n"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">&lt;!-- 定义日志存储的路径，不要配置相对路径 --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"FILE_PATH"</span> <span class="attr">value</span>=<span class="string">"/Users/WorkIsLife/logs/"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"FILE_NAME"</span> <span class="attr">value</span>=<span class="string">"spring.log"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">Properties</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">console</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">&lt;!--输出日志的格式--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"$&#123;LOG_PATTERN&#125;"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">&lt;!--控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"info"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">console</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">&lt;!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试用--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">"Filelog"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;FILE_PATH&#125;/test.log"</span> <span class="attr">append</span>=<span class="string">"false"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"$&#123;LOG_PATTERN&#125;"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">File</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">&lt;!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFileInfo"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;FILE_PATH&#125;/info.log"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">"$&#123;FILE_PATH&#125;/$&#123;FILE_NAME&#125;-INFO-%d&#123;yyyy-MM-dd&#125;_%i.log.gz"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">             <span class="comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"info"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"$&#123;LOG_PATTERN&#125;"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                 <span class="comment">&lt;!--interval属性用来指定多久滚动一次，默认是1 hour--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">"1"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"10MB"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                  <span class="comment">&lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">"15"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                </span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">&lt;!-- 这个会打印出所有的warn及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFileWarn"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;FILE_PATH&#125;/warn.log"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">"$&#123;FILE_PATH&#125;/$&#123;FILE_NAME&#125;-WARN-%d&#123;yyyy-MM-dd&#125;_%i.log.gz"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"warn"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"$&#123;LOG_PATTERN&#125;"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                 <span class="comment">&lt;!--interval属性用来指定多久滚动一次，默认是1 hour--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">"1"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"10MB"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                  <span class="comment">&lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">"20"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">&lt;!-- 这个会打印出所有的error及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFileError"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;FILE_PATH&#125;/error.log"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">"$&#123;FILE_PATH&#125;/$&#123;FILE_NAME&#125;-ERROR-%d&#123;yyyy-MM-dd&#125;_%i.log.gz"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                  <span class="comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                  </span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"error"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"$&#123;LOG_PATTERN&#125;"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                 <span class="comment">&lt;!--interval属性用来指定多久滚动一次，默认是1 hour--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">"1"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"10MB"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                  <span class="comment">&lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">"20"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--然后定义loggers，只有定义了logger并引入的appender，appender才会生效--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">&lt;!--过滤掉spring和mybatis的一些无用的DEBUG信息--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.mybatis"</span> <span class="attr">level</span>=<span class="string">"info"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">&lt;!--监控系统信息--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">&lt;!--若是additivity设为false，则 子Logger 只会在自己的appender里输出，而不会在 父Logger 的appender里输出。--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"org.springframework"</span> <span class="attr">level</span>=<span class="string">"info"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">Logger</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Filelog"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileInfo"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileWarn"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileError"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></pre></td></tr></table></figure>

<p><code>FILE_PATH</code> 和<code>FILE_NAME</code>可自定义。</p>
<h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p>结合lombok中的@Slf4j注解，以很方便的使用 <strong><code>org.slf4j.Logger</code></strong> 对象。<strong>日常开发尽量使用<code>Slf4j</code>门面来处理日志，尽量避免使用具体的日志框架。</strong></p>
<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunDemo</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> Map <span class="title">test</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    log.info(<span class="string">"报告院长，这里输出了一条日志~~~"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>输出</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">18:18:22.404 [http-nio-80-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 5 ms</span></pre></td></tr><tr><td class="code"><pre><span class="line">18:18:33.046 [http-nio-80-exec-5] INFO  com.xxx.controller.RunDemo - 报告院长，这里输出了一条日志~~~</span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Log4j2</tag>
      </tags>
  </entry>
  <entry>
    <title>Java生成MD5</title>
    <url>/2020/01/05/Java%E7%94%9F%E6%88%90MD5/</url>
    <content><![CDATA[<img src="/2020/01/05/Java%E7%94%9F%E6%88%90MD5/image01.png" class="">

<a id="more"></a>

<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><strong>MD5</strong>消息摘要算法（英语：<strong>MD5</strong> Message-Digest Algorithm），一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致。</p>
<p>MD5加密算法为现在应用最广泛的哈希算法之一，该算法广泛应用于互联网网站的用户文件加密，能够将用户密码加密为128位的长整数。数据库并不明文存储用户密码，而是在用户登录时将输入密码字符串进行MD5加密，与数据库中所存储的MD5值匹配，从而降低密码数据库被盗取后用户损失的风险。</p>
<h1 id="基于Spring实践"><a href="#基于Spring实践" class="headerlink" title="基于Spring实践"></a>基于Spring实践</h1><p>spring中提供了加密工具类<code>org.springframework.util.DigestUtils</code>，上手简单，可以在工具类的基础上根据自己的业务需求进行加密优化。如在加密时增加加密盐等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5Util</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 加密盐</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SALT = <span class="string">"!@#$%^&amp;^%$sdf"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMD5</span><span class="params">(String str)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Assert.notNull(str, <span class="string">"加密对象为空"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    String base = str + <span class="string">"/"</span> + SALT;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    String md5 = DigestUtils.md5DigestAsHex(base.getBytes());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> md5;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    MD5Util.getMD5(<span class="string">"院长"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>上面demo的<strong>加密盐</strong>是固定的，实际项目中可以增加自己的逻辑，最好做到动态加盐。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Java注解总结</title>
    <url>/2020/01/03/Java%E6%B3%A8%E8%A7%A3%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>数字滚动插件CountUp</title>
    <url>/2020/01/02/CountUp/</url>
    <content><![CDATA[<img src="/2020/01/02/CountUp/image01.gif" class="">

<a id="more"></a>

<h1 id="数字滚动插件CountUp"><a href="#数字滚动插件CountUp" class="headerlink" title="数字滚动插件CountUp"></a>数字滚动插件CountUp</h1><p>给下面的数字添加滚动功能：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"num"</span>&gt;</span>50<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></pre></td></tr></table></figure>

<p>首先引入jq和js插件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"jquery-1.11.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"jquery.countUp.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure>

<p>然后，给JQuery 添加方法，设置参数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">    <span class="comment">//调用案例，需要在被调用的标签内 写上最终的数值</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">    jQuery(<span class="function"><span class="keyword">function</span><span class="params">($)</span> </span>&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="javascript">        $(<span class="string">".timer"</span>).countTo(&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">            lastSymbol:<span class="string">" %"</span>, <span class="comment">//显示在最后的字符</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="javascript">            <span class="keyword">from</span>: <span class="number">0</span>,  <span class="comment">// 开始时的数字</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">            speed: <span class="number">2000</span>,  <span class="comment">// 总时间</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">            refreshInterval: <span class="number">10</span>,  <span class="comment">// 刷新一次的时间</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">            beforeSize:<span class="number">0</span>, <span class="comment">//小数点前最小显示位数，不足的话用0代替 </span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">            decimals: <span class="number">2</span>,  <span class="comment">// 小数点后的位数，小数做四舍五入</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">            onUpdate: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">            &#125;,  <span class="comment">// 更新时回调函数</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">            onComplete: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="javascript">                <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="built_in">arguments</span>)&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[i]);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure>



<h1 id="官方地址"><a href="#官方地址" class="headerlink" title="官方地址"></a>官方地址</h1><p><a href="http://inorganik.github.io/countUp.js/" target="_blank" rel="noopener">http://inorganik.github.io/countUp.js/</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>数字滚动</tag>
      </tags>
  </entry>
  <entry>
    <title>kaptcha 谷歌验证码</title>
    <url>/2020/01/01/kaptcha/</url>
    <content><![CDATA[<h1 id="pom依赖"><a href="#pom依赖" class="headerlink" title="pom依赖"></a>pom依赖</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.penggle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kaptcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr></table></figure>



<p>具体使用说明可参考 <a href="http://code.google.com/p/kaptcha/" target="_blank" rel="noopener">kaptcha官网</a> 。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>验证码</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringEL</title>
    <url>/2019/12/30/SpringEL/</url>
    <content><![CDATA[<img src="/2019/12/30/SpringEL/image01.png" class="">

<a id="more"></a>


<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Spring表达式语言，简称SpEL。是一个支持查询和操作运行时对象导航图功能的强大的表达式语言。它可以在运行时查询和操作数据，尤其是数组列表型数据，因此可以缩减代码量，优化代码结构。</p>
<p>使用<code>#{...}</code>作为定界符，所有在大括号中的字符都将被认为是SpEL。</p>
<p>SpEL为Bean的属性进行动态赋值提供了便利。</p>
<p>通过SpEL可以实现：</p>
<ol>
<li>​    通过bean的id对bean进行引用；</li>
<li>​    调用方法以及引用对象中的属性；</li>
<li>​    计算表达式的值；</li>
<li>​    正则表达式的匹配；</li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBean配置方式</title>
    <url>/2019/12/26/SpringBean%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<img src="/2019/12/26/SpringBean%E9%85%8D%E7%BD%AE/image01.png" class="">

<a id="more"></a>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>Spring提供了BenaFactory和ApplicationContext两种类型的IOC容器实现，Spring又是如何将Bean装配到IOC容器中的呢？</strong></p>
<p>以前Java框架基本都采用了XML作为配置文件，但是现在Java框架又不约而同地支持基于Annotation的“零配置”来代替XML配置文件，Struts2、Hibernate、Spring都开始使用Annotation来代替XML配置文件了；而在Spring 3.x提供了三种选择，分别是：基于XML的配置、基于注解的配置和基于Java类的配置。</p>
<hr>
<p>下面分别介绍下这三种配置方式：</p>
<h2 id="基于XML的配置"><a href="#基于XML的配置" class="headerlink" title="基于XML的配置"></a>基于XML的配置</h2><p>应用场景：当使用三方类库时，比如DataSource、HibernateTemplate等，无法在类中标注注解信息，只能通过XML进行配置；而且命名空间的配置，比如aop、context等，也只能采用基于XML的配置。</p>
<ul>
<li>JavaBean</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">this</span>.name = name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      System.out.println(<span class="string">"hello: "</span> + name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">HelloWorld</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      System.out.println(<span class="string">"HelloWorld类的无参构造器"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      System.out.println(<span class="string">"do init  ......"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      System.out.println(<span class="string">"do destroy  ...... "</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>Xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloWorld"</span> <span class="attr">class</span>=<span class="string">"spring01.HelloWorld"</span> <span class="attr">lazy-init</span>=<span class="string">"true"</span> <span class="attr">init-method</span>=<span class="string">"init"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">      <span class="attr">destroy-method</span>=<span class="string">"destroy"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"spring"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr></table></figure>

<p>通过属性注入，即setter方法注入Bean的值或者依赖的对象，<strong>属性注入是最常用的注入方式</strong>。</p>
<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ConfigurableApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="string">"applicationContext.xml"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">HelloWorld helloWorld = (HelloWorld) context.getBean(<span class="string">"helloWorld"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(helloWorld);</span></pre></td></tr><tr><td class="code"><pre><span class="line">helloWorld.hello();</span></pre></td></tr><tr><td class="code"><pre><span class="line">context.close();</span></pre></td></tr></table></figure>

<p>为了演示容器销毁时调用Bean的destroy-method，此处使用ConfigurableApplicationContext，ConfigurableApplicationContext扩展于ApplicationContext，新增了两个方法：refresh()和close()，让ApplicationContext具有启动，刷新和关闭上文的能力。</p>
<ul>
<li>测试结果</li>
</ul>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">HelloWorld类的无参构造器</span></pre></td></tr><tr><td class="code"><pre><span class="line">setName: spring</span></pre></td></tr><tr><td class="code"><pre><span class="line">do init  ......</span></pre></td></tr><tr><td class="code"><pre><span class="line">spring01.HelloWorld@55fe41ea</span></pre></td></tr><tr><td class="code"><pre><span class="line">hello: spring</span></pre></td></tr><tr><td class="code"><pre><span class="line">do destroy  ......</span></pre></td></tr></table></figure>

<p>从上出输出也可以看出，程序启动在获取Bean时，先创建Bean对象，然后设置属性setName，执行init方法，最后再获取Bean实例，当容器关闭时，调用Bean的destroy方法。</p>
<h3 id="XML装配常用的集合类"><a href="#XML装配常用的集合类" class="headerlink" title="XML装配常用的集合类"></a>XML装配常用的集合类</h3><ul>
<li>JavaBean</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionDemo</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> List&lt;String&gt; list;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> Map&lt;String, Object&gt; map;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> Properties properties;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> Set&lt;String&gt; set;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> String[] array;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">//省略setter getter</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"collectionDemo"</span> <span class="attr">class</span>=<span class="string">"spring01.CollectionDemo"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"装配集合类"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--装配List类型的list--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value-list-1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value-list-2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value-list-3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--装配Map类型的map--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"map1"</span> <span class="attr">value</span>=<span class="string">"value-key-1"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"map2"</span> <span class="attr">value</span>=<span class="string">"value-key-2"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"map3"</span> <span class="attr">value</span>=<span class="string">"value-key-3"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--装配Properties类型的properties--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"pro1"</span>&gt;</span>value-pro-1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"pro2"</span>&gt;</span>value-pro-2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"pro3"</span>&gt;</span>value-pro-3<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--装配Set类型的set--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"set"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value-set-1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value-set-2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value-set-3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--装配String[]类型的array--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"array"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value-array-1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value-array-2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value-array-3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">CollectionDemo demo = ctx.getBean(CollectionDemo<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(demo.getName());</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(demo.getProperties().getProperty(<span class="string">"pro1"</span>));</span></pre></td></tr></table></figure>

<ul>
<li>测试结果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">装配集合类</span></pre></td></tr><tr><td class="code"><pre><span class="line">value-pro-1</span></pre></td></tr></table></figure>

<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">总结：</span></pre></td></tr><tr><td class="code"><pre><span class="line">   List 属性为对应的 &lt;list&gt; 元素进行装配，然后通过多个 &lt;value&gt; 元素设值</span></pre></td></tr><tr><td class="code"><pre><span class="line">   Map 属性为对应的 &lt;map&gt; 元素进行装配，然后通过多个 &lt;entry&gt; 元素设值， 只是 entry 包含一个键值对(key-value)的设置</span></pre></td></tr><tr><td class="code"><pre><span class="line">   Properties 属性为对应的 &lt;properties&gt; 元素进行装配，通过多个 &lt;property&gt; 元素设值，只是 properties 元素有一个必填属性 key ，然后可以设置值</span></pre></td></tr><tr><td class="code"><pre><span class="line">   Set 属性为对应的 &lt;set&gt; 元素进行装配，然后通过多个 &lt;value&gt; 元素设值</span></pre></td></tr><tr><td class="code"><pre><span class="line"> 对于数组而言，可以使用 &lt;array&gt; 设置值，然后通过多个 &lt;value&gt; 元素设值。</span></pre></td></tr></table></figure>



<h3 id="命名空间装配"><a href="#命名空间装配" class="headerlink" title="命名空间装配"></a>命名空间装配</h3><p> Spring 还提供了对应的命名空间的定义，只是在使用命名空间的时候要先引入对应的命名空间和 XML 模式（XSD）文件。</p>
<ul>
<li><h4 id="p-命名空间（声明setter属性）"><a href="#p-命名空间（声明setter属性）" class="headerlink" title="p-命名空间（声明setter属性）"></a>p-命名空间（声明setter属性）</h4></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:p="http://www.springframework.org/schema/p"</span></pre></td></tr><tr><td class="code"><pre><span class="line">.</span></pre></td></tr><tr><td class="code"><pre><span class="line">.</span></pre></td></tr><tr><td class="code"><pre><span class="line">.   </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloWorld2"</span> <span class="attr">class</span>=<span class="string">"spring01.HelloWorld"</span> <span class="attr">p:name</span>=<span class="string">"Java 是世界上最好的语言"</span>/&gt;</span></span></pre></td></tr></table></figure>



<ul>
<li><h4 id="c-命名空间（声明构造参数）"><a href="#c-命名空间（声明构造参数）" class="headerlink" title="c-命名空间（声明构造参数）"></a>c-命名空间（声明构造参数）</h4><p>如下面一个javabean：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> String brand;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> String corp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> <span class="keyword">double</span> price;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String brand, String corp, <span class="keyword">double</span> price)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">super</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">this</span>.brand = brand;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">this</span>.corp = corp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">this</span>.price = price;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr></table></figure>

<p>​       使用c-命名空间来声明构造器参数：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:c="http://www.springframework.org/schema/c"</span></pre></td></tr><tr><td class="code"><pre><span class="line">.</span></pre></td></tr><tr><td class="code"><pre><span class="line">.</span></pre></td></tr><tr><td class="code"><pre><span class="line">.  </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    不适用命名空间--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car4"</span> <span class="attr">class</span>=<span class="string">"spring01.Car"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"Audi"</span> <span class="attr">index</span>=<span class="string">"0"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"上海"</span> <span class="attr">index</span>=<span class="string">"1"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"200000"</span> <span class="attr">index</span>=<span class="string">"2"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    使用命名空间--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car5"</span> <span class="attr">class</span>=<span class="string">"spring01.Car"</span> <span class="attr">c:brand</span>=<span class="string">"Audi"</span> <span class="attr">c:corp</span>=<span class="string">"上海"</span> <span class="attr">c:price</span>=<span class="string">"20000"</span>/&gt;</span></span></pre></td></tr></table></figure>

<ul>
<li><h4 id="util-命名空间"><a href="#util-命名空间" class="headerlink" title="util-命名空间"></a>util-命名空间</h4></li>
</ul>
<p>util-命名空间提供的所有元素：</p>
<table>
<thead>
<tr>
<th align="left">元素</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="util:constant" target="_blank" rel="noopener">util:constant</a></td>
<td>引用某个类型public static 域，并将其暴露为bean</td>
</tr>
<tr>
<td align="left"><a href="util:list" target="_blank" rel="noopener">util:list</a></td>
<td>创建一个java.util.list类型的bean，其中包含值或者引用</td>
</tr>
<tr>
<td align="left"><a href="util:map" target="_blank" rel="noopener">util:map</a></td>
<td>创建一个java.util.map类型的bean，其中包含值或者引用</td>
</tr>
<tr>
<td align="left"><a href="util:properties" target="_blank" rel="noopener">util:properties</a></td>
<td>创建一个java.util.properties类型的bean</td>
</tr>
<tr>
<td align="left"><a href="util:property-path" target="_blank" rel="noopener">util:property-path</a></td>
<td>引用一个属性（或内嵌属性），并将其暴露为bean</td>
</tr>
<tr>
<td align="left"><a href="util:set" target="_blank" rel="noopener">util:set</a></td>
<td>创建一个java.util.set类型的bean，其中包含值或者引用</td>
</tr>
</tbody></table>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入util-命名空间之前 --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"bean1"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"bean2"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入util-命名空间之后 --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"bean1"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"bean2"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span></pre></td></tr></table></figure>



<h2 id="基于注解的配置"><a href="#基于注解的配置" class="headerlink" title="基于注解的配置"></a>基于注解的配置</h2><p>应用场景：当Bean的实现类是当前项目开发的，可以直接在Java类中使用基于注解的配置，配置相对比较简单。这里暂不多做描述，也是<strong>最常用的配置方式</strong>。</p>
<h2 id="基于Java类的配置"><a href="#基于Java类的配置" class="headerlink" title="基于Java类的配置"></a>基于Java类的配置</h2><p>应用场景：当实例化Bean的逻辑比较复杂时，则比较适合基于Java类配置的方式。比如，你想要将第三方库中的组件装配到你的应用中，在这种情况下，是没有办法在它的类上添加@Component和@Autowired注解的，因此就不能使用基于注解的配置方案了。</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring IoC</title>
    <url>/2019/12/22/SpringIoC/</url>
    <content><![CDATA[<img src="/2019/12/22/SpringIoC/image01.png" class="">

<a id="more"></a>

<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="IoC（Inversion-of-Control）"><a href="#IoC（Inversion-of-Control）" class="headerlink" title="IoC（Inversion of Control）"></a>IoC（Inversion of Control）</h2><p>其思想是反转资源获取的方向，传统的资源查找方式是要求组件想容器发送请求来查找资源，作为回应，容器适时地返回资源。</p>
<p>而应用了IoC之后，则是容器主动地将资源推送给它所管理的组件，组件所要做的仅是选择一种合适的方式来接收资源，这种行为也被称为查找的被动形式。</p>
<h2 id="DI（Dependency-Injection）"><a href="#DI（Dependency-Injection）" class="headerlink" title="DI（Dependency Injection）"></a>DI（Dependency Injection）</h2><p>IoC的另一种表述方式：即组件以一写预先定义好的方式（如：setter方法）接收来自如容器的资源注入。相较于IoC而言，这种表述更直接。</p>
<h1 id="Spring-IoC-实现"><a href="#Spring-IoC-实现" class="headerlink" title="Spring IoC 实现"></a>Spring IoC 实现</h1><blockquote>
<p>在Spring IoC容器读取Bean配置 创建Bean实例之前，必须对容器进行实例化。只有在容器实例化后，才可以从IoC容器里获取Bean实例并使用。</p>
</blockquote>
<p>Spring提供了两种类型的IoC容器实现</p>
<ul>
<li><p>BeanFactory</p>
<p>  IoC的基本实现。</p>
</li>
</ul>
<ul>
<li><p>AppliacationContext</p>
<p>  提供了更多的高级特性，是BeanFactory的子接口,代表的是一个IoC容器.</p>
</li>
</ul>
<pre><code>BeanFactory是Spring框架的基础设施，面向的是Spring本身；
AppliacationContext面向的是使用Spring框架的开发者;
几乎所有的应用场景都直接使用AppliacationContext而非底层的BeanFactory;
无论使用何种方式，配置文件是相同的.</code></pre><h2 id="AppliacationContext"><a href="#AppliacationContext" class="headerlink" title="AppliacationContext"></a>AppliacationContext</h2><p>AppliacationContext主要实现类：</p>
<ul>
<li><p>ClassPathXmlApplicationContext</p>
<p>  从类路径下加载配置文件。</p>
</li>
<li><p>FileSystemXmlApplicationContext<br>  从系统文件中加载配置文件。</p>
<pre><code>相关父类或拓展类可查看spring源码。</code></pre></li>
</ul>
<h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><ol>
<li><a href="https://docs.spring.io/spring/docs/5.2.2.RELEASE/spring-framework-reference/core.html#beans" target="_blank" rel="noopener">  <strong>官方 The IoC Container</strong></a></li>
<li><a href="https://javadoop.com/post/spring-ioc" target="_blank" rel="noopener">  Spring IoC 容器源码分析</a></li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 plan</title>
    <url>/2019/12/21/2020-plan/</url>
    <content><![CDATA[<img src="/2019/12/21/2020-plan/image01.png" class="" title="2020年学习计划">

<a id="more"></a>

<ul>
<li><p>Spring  </p>
</li>
<li><p>并发编程  </p>
</li>
<li><p>容器技术方案研究  </p>
</li>
</ul>
]]></content>
      <tags>
        <tag>计划</tag>
      </tags>
  </entry>
</search>
